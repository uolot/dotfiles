#!/usr/bin/env python3

import sys
import time
from itertools import cycle

import tkinter


def seconds_to_time_str(t):
    m, s = divmod(t, 60)
    return f"{m:>02}:{s:>02}"


class Timer:
    def __init__(self, duration: int):
        self.duration = duration
        self.started_at = 0

    def start(self):
        self.started_at = time.time()  # type: ignore

    @classmethod
    def from_str(cls, minutes):
        return cls(minutes * 60)

    @property
    def time_passed(self):
        return int(time.time() - self.started_at)

    @property
    def time_left(self):
        return max(self.duration - self.time_passed, 0)

    @property
    def finished(self):
        return self.time_left == 0

    def __str__(self):
        return seconds_to_time_str(self.time_left)

    def __repr__(self):
        return f"<Timer: {str(self)}>"


class Window(tkinter.Frame):
    def __init__(self, times: str, master=None):
        tkinter.Frame.__init__(self, master, bg="black")
        self.master = master
        self.timers = cycle([Timer.from_str(int(minutes)) for minutes in times.split(",")])
        self.current_timer = next(self.timers)
        self.current_timer.start()
        self.init_window()

    def init_window(self):
        self.master.title("timer")
        self.pack(fill=tkinter.BOTH, expand=1)

        font_name = "Bitstream Vera Sans"
        colors = {"fg": "white", "bg": "black"}

        self.time_label = tkinter.Label(self, text="", font=(font_name, 30), **colors)
        self.time_label.pack()

        self.update()

        self.bind("<KeyRelease>", self.keyup)
        self.focus_set()

    def keyup(self, e):
        key = e.keysym.lower()
        if key in ["q", "escape", "space"]:
            print("Quit!")
            self.client_exit()
        elif key == "n":
            self.current_timer = next(self.timers)
            self.current_timer.start()
        elif key == "r":
            self.current_timer.start()


    def update(self):
        self.time_label["text"] = str(self.current_timer)
        time_left = self.current_timer.time_left
        print(time_left, flush=True)
        if time_left <= 10:
            self.time_label.config(bg="black" if time_left & 1 else "red")
        else:
            self.time_label.config(bg="black")

        self.after(100, self.update)

    def client_exit(self):
        exit(0)


if __name__ == "__main__":
    root = tkinter.Tk()
    app = Window(sys.argv[1], root)
    root.mainloop()
